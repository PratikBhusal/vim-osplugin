*osplugin.txt*  Easily source OS-specific configuration files
*osplugin* *vim-osplugin*
               _                                _             _              ~
        __   _(_)_ __ ___        ___  ___ _ __ | |_   _  __ _(_)_ __         ~
        \ \ / / | '_ ` _ \ ____ / _ \/ __| '_ \| | | | |/ _` | | '_ \        ~
         \ V /| | | | | | |____| (_) \__ \ |_) | | |_| | (_| | | | | |       ~
          \_/ |_|_| |_| |_|     \___/|___/ .__/|_|\__,_|\__, |_|_| |_|       ~
                                         | |             __/ |               ~
                                         |_|            |___/                ~
==============================================================================
CONTENTS                                                   *osplugin-contents*

  1. Configuration...........................................|osplugin-config|
  2. Functions............................................|osplugin-functions|
  3. License................................................|osplugin-license|

==============================================================================
CONFIGURATION                                                *osplugin-config*

---------------------------------------                   *g:osplugin_verbose*
Flag to enable or disable verbose mode. Enabling this also shows which
configuration files were sourced by the `g:osplugin_initilized_files` variable.
>
    let g:osplugin_verbose = 0
<
---------------------------------------                       *g:osplugin_dir*
Location of osplugin directory.

On Windows: >
    let g:osplugin_dir = expand('$HOME/vimfiles/osplugin')
On anything else: >
    let g:osplugin_dir = expand('$HOME/.vim/osplugin')
<
---------------------------------------           *g:osplugin_auto_create_dir*
By default the user would have to manually create the directory. If you want
the plugin to automatically create the directory, set this to `1`.
>
    let g:osplugin_auto_create_dir = 0
<
---------------------------------------       *g:osplugin_auto_create_os_file*
By default the user would have to manually create the file(s) for osplugin to
source the configurations. If you want the plugin to automatically create the
file(s), set this to `1`.
>
    let g:osplugin_auto_create_os_file = 0
<
---------------------------------------     *g:osplugin_auto_create_os_folder*
By default the user would have to manually create the folder(s) for osplugin
to source the configurations. If you want the plugin to automatically create
the folder(s), set this to `1`.
>
    let g:osplugin_auto_create_os_folder = 0
<
==============================================================================
FUNCTIONS                                                 *osplugin-functions*

---------------------------------------                      *osplugin#init()*
osplugin#init({os_name})

Adds {os_filename} to the list of configuration files to source. If
`g:osplugin_auto_create_file` is enabled and {os_filename} is unreadable, then
it also creates a blank file.

For example, if you want to load cygwin and linux specific configurations:
>
    if g:cygwin
        call osplugin#init('cygwin')
        call osplugin#init('linux')
    endif
<
==============================================================================
LICENSE                                                     *osplugin-license*
MIT License. Copyright Â© 2017-2018 Pratik Bhusal

vim:tw=78:ts=8:ft=help:norl:
